package ngs.view{  import flash.display.MovieClip;  import flash.events.MouseEvent;  import flash.events.Event;  import flash.geom.Rectangle;  import com.greensock.TweenLite;  import com.greensock.plugins.TweenPlugin;  import com.greensock.plugins.RemoveTintPlugin;  import com.greensock.easing.*;  import net.phrologue.utils.MouseEvents;  import flash.events.EventDispatcher;  import ngs.model.Session;  public class FlickSwitch extends MovieClip   {    public static const SHOW_YEARS_LEFT:String = "showYearsLeft";    public static const SHOW_AMOUNT_LEFT:String = "showAmountLeft";        public var _session:Session;    public var dispatcher:EventDispatcher = new EventDispatcher();        public function FlickSwitch()    {      TweenPlugin.activate([RemoveTintPlugin]);            this.addEventListener(MouseEvent.ROLL_OVER, handler);      this.addEventListener(MouseEvent.ROLL_OUT, handler);            function handler(event:MouseEvent):void      {        switch (event.type)        {          case MouseEvent.ROLL_OVER:            break;          case MouseEvent.ROLL_OUT:            break;        }      }    }        public function set session(m:Session):void    {      _session = m;      init();    }        public function get session():Session    {      return _session;    }        public function init():void    {      var bounds:Rectangle = new Rectangle(rim.x, rim.y + 1, (rim.width - 1) - lever.width, 0);            lever.buttonMode = true;      lever.addEventListener(MouseEvent.MOUSE_DOWN, handler);            amountLeft_hitArea.buttonMode = true;      amountLeft_hitArea.addEventListener(MouseEvent.ROLL_OVER, amountLeft_rollHandler);      amountLeft_hitArea.addEventListener(MouseEvent.ROLL_OUT, amountLeft_rollHandler);      amountLeft_hitArea.addEventListener(MouseEvent.MOUSE_DOWN, shiftLeft);            function amountLeft_rollHandler(event:MouseEvent):void      {        switch (event.type)        {          case MouseEvent.ROLL_OVER:            if (session.pageOneIndex == 1) TweenLite.to(amountLeft_txt, 0.15, { tint: 0x333333, ease: Expo.easeOut } );            break;                    case MouseEvent.ROLL_OUT:            if (session.pageOneIndex == 1) TweenLite.to(amountLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut } );            break;        }      }            yearsLeft_hitArea.buttonMode = true;      yearsLeft_hitArea.addEventListener(MouseEvent.ROLL_OVER, yearsLeft_rollHandler);      yearsLeft_hitArea.addEventListener(MouseEvent.ROLL_OUT, yearsLeft_rollHandler);      yearsLeft_hitArea.addEventListener(MouseEvent.MOUSE_DOWN, shiftRight);            function yearsLeft_rollHandler(event:MouseEvent):void      {        switch (event.type)        {          case MouseEvent.ROLL_OVER:            if (session.pageOneIndex == 0) TweenLite.to(yearsLeft_txt, 0.15, { tint: 0x333333, ease: Expo.easeOut } );            break;                    case MouseEvent.ROLL_OUT:            if (session.pageOneIndex == 0) TweenLite.to(yearsLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut } );            break;        }      }            left_hitArea.addEventListener(MouseEvent.MOUSE_DOWN, shiftLeft);      right_hitArea.addEventListener(MouseEvent.MOUSE_DOWN, shiftRight);            if (session.pageOneIndex == 0)      {        TweenLite.to(amountLeft_txt, 0.15, { tint: 0x2EA8DC, ease: Expo.easeOut });        TweenLite.to(yearsLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut });      }            if (session.pageOneIndex == 1)      {        TweenLite.to(yearsLeft_txt, 0.15, { tint: 0x2EA8DC, ease: Expo.easeOut });        TweenLite.to(amountLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut });      }            function shiftLeft():void       {         dispatcher.dispatchEvent(new Event(FlickSwitch.SHOW_AMOUNT_LEFT));        TweenLite.to(lever, 0.15, { x: -12, ease: Expo.easeOut } );         TweenLite.to(amountLeft_txt, 0.15, { tint: 0x2EA8DC, ease: Expo.easeOut });        TweenLite.to(yearsLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut });      }            function shiftRight():void       {        dispatcher.dispatchEvent(new Event(FlickSwitch.SHOW_YEARS_LEFT));        TweenLite.to(lever, 0.15, { x: 0, ease: Expo.easeOut } );         TweenLite.to(yearsLeft_txt, 0.15, { tint: 0x2EA8DC, ease: Expo.easeOut });        TweenLite.to(amountLeft_txt, 0.15, { removeTint: true, ease: Expo.easeOut });      }            function handler(event:MouseEvent):void      {        switch (event.type)        {          case MouseEvent.CLICK:            break;                    case MouseEvent.MOUSE_DOWN:            lever.stage.addEventListener(MouseEvent.MOUSE_UP, handler);            lever.startDrag(false, bounds);            break;          }                    case MouseEvent.MOUSE_UP:            lever.stage.removeEventListener(MouseEvent.MOUSE_UP, handler);            lever.stopDrag();            if (lever.x < -6.5)            {              if (session.pageOneIndex == 0)              {                shiftRight();              }                            else              {                shiftLeft();              }            }                        else            {              if (session.pageOneIndex == 1)              {                shiftLeft();              }                            else              {                shiftRight();              }            }            break;          }        }      }    }  }}