package ngs.view{  import flash.display.MovieClip;  import flash.geom.Point;  import com.greensock.TweenLite;  import com.greensock.TweenMax;  import com.greensock.plugins.TweenPlugin;  import com.greensock.easing.*;  import com.greensock.plugins.TransformAroundCenterPlugin;  import com.greensock.plugins.TransformAroundPointPlugin;  import com.greensock.plugins.AutoAlphaPlugin;  import com.greensock.plugins.MotionBlurPlugin;  import com.greensock.easing.CustomEase;  import com.greensock.TimelineMax;  import flash.events.MouseEvent;    public class NgasChart extends MovieClip  {    public var instanceList:Array = new Array;    public var animateIn:TimelineMax = new TimelineMax({});    public var def_width:Number;    public var def_height:Number;    public var numInstances:Number = 51;        public var countryLabel:CountryLabel = new CountryLabel();        public var topInstances:Array;              public var blueInstances:Array;    public var orangeInstances:Array;    public var yellowInstances:Array;    public var greenInstances:Array;        public var topCountries:Array =     [       "Russian Federation",      "Iraq",      "Iran",      "Turkmenistan",      "Saudi Arabia",      "US",      "United Arab Emirates"    ];            public var greenCountries:Array =    [      "Venezuela",      "Nigeria",      "Algeria",      "Indonesia",      "Iraq"    ];        public var orangeCountries:Array =    [      "Australia",      "China",      "Malaysia",      "Egypt",      "Norway",      "Kazakhstan",      "Kuwait",      "Canada",      "Uzbekistan",      "Libya"    ];        public var blueCountries:Array =    [      "Azerbaijan",      "Other Africa",      "India",      "Netherlands",      "Ukraine",      "Oman",      "Pakistan",      "Bolivia",      "Vietnam",      "Romania",      "Myanmar",      "Yemen",      "Mexico"    ];        public var yellowCountries:Array =     [      "Other Europe & Eurasia",      "Papua New Guinea",      "Trinidad & Tobago",      "Argentina",      "Brazil",      "Thailand",      "Bangladesh",      "Brunei",      "Peru",      "United Kingdom",      "Syria",      "Colombia",      "Poland",      "Denmark",      "Germany",      "Italy",      "Bahrain"    ];    public function NgasChart()     {      TweenPlugin.activate([MotionBlurPlugin, AutoAlphaPlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin])      init();    }        public function init():void    {      register();      sharpen();    }        public function enableLabels():void    {      topInstances = [ instance0, instance47, instance48, instance51, instance45, instance46, instance44 ];      greenInstances = [ instance49, instance13, instance39, instance42, instance50 ];      blueInstances = [ instance8, instance19, instance24, instance25, instance31, instance10, instance6, instance3, instance22, instance21, instance27, instance4, instance14 ]      orangeInstances = [ instance43, instance34, instance37, instance41, instance40, instance34, instance35, instance38, instance1, instance33, instance36 ];      yellowInstances = [ instance32, instance9, instance2, instance11, instance16, instance5, instance26, instance12, instance15, instance5, instance20, instance28, instance29, instance23, instance30, instance18, instance17 ];            for (var i:int = 0; i < topInstances.length; i++)      {        topInstances[i].country = topCountries[i];        topInstances[i].addEventListener(MouseEvent.ROLL_OVER, handler);        topInstances[i].addEventListener(MouseEvent.ROLL_OUT, handler);      }            for (var k:int = 0; k < blueInstances.length; k++)      {        blueInstances[k].country = blueCountries[k];        blueInstances[k].addEventListener(MouseEvent.ROLL_OVER, handler);        blueInstances[k].addEventListener(MouseEvent.ROLL_OUT, handler);      }            for (var n:int = 0; n < orangeInstances.length; n++)      {        orangeInstances[n].country = orangeCountries[n];        orangeInstances[n].addEventListener(MouseEvent.ROLL_OVER, handler);        orangeInstances[n].addEventListener(MouseEvent.ROLL_OUT, handler);      }            for (var j:int = 0; j < greenInstances.length; j++)      {        greenInstances[j].country = greenCountries[j];        greenInstances[j].addEventListener(MouseEvent.ROLL_OVER, handler);        greenInstances[j].addEventListener(MouseEvent.ROLL_OUT, handler);      }            for (var m:int = 0; m < yellowInstances.length; m++)      {        yellowInstances[m].country = yellowCountries[m];        yellowInstances[m].addEventListener(MouseEvent.ROLL_OVER, handler);        yellowInstances[m].addEventListener(MouseEvent.ROLL_OUT, handler);      }            function handler(event:MouseEvent):void      {        var curObj:Object = Object(parent).getChildByName("countryLabel");                switch (event.type)        {          case MouseEvent.ROLL_OVER:            curObj.x = Object(parent).mouseX;            curObj.y = Object(parent).mouseY + 20;            curObj.startDrag();            curObj.visible = true;            curObj.country.text = event.currentTarget.country;            curObj.bg.width = curObj.country.textWidth + 12;            break;          case MouseEvent.ROLL_OUT:            Object(parent).getChildByName("countryLabel").stopDrag();            Object(parent).getChildByName("countryLabel").visible = false;            curObj.country.text = "";            break;        }      }    }        public function register():void    {            for (var i:int = 0; i < numInstances + 1; i++)      {        var obj:Object = getChildByName("instance" + i);        obj.def_x = Math.round(obj.x);        obj.def_y = Math.round(obj.y);        obj.def_height = Math.round(obj.height);        obj.def_width = Math.round(obj.width);                instanceList.push(obj);      }    }        public function sharpen():void    {      this.x = Math.round(this.x);      this.y = Math.round(this.y);      this.width = Math.round(this.width);      this.height = Math.round(this.height);      for (var i:int = 0; i < instanceList.length; i++)      {        var ins:Object = instanceList[i];        ins.x = Math.round(ins.x);        ins.y = Math.round(ins.y);        ins.height = Math.round(ins.height);        ins.width = Math.round(ins.width);      };    }        public function transitionIn():void    {      preTransitionState();            this.visible = true;            CustomEase.create("bouncy", [{s:0,cp:0.77,e:1.048},{s:1.048,cp:1.326,e:1.112},{s:1.112,cp:0.898,e:1}]);      for (var i:int = 0; i < instanceList.length; i++)      {        var ins:Object = instanceList[i];        var time = 0.001 * (i * 2.6) ;        var delay:Number = (time / 200) * i ;        var randomX:Number = (Math.random() * 500) - 250;        var randomY:Number = (Math.random() * 500) - 250;        var randomSpeed:Number = 0.4 + Math.random() * 0.4;                animateIn.insert        (          TweenMax.to(ins, randomSpeed,          {             x: ins.def_x, y: ins.def_y, autoAlpha: 1,            ease: Back.easeOut, delay: 0.0023 * i, overwrite: true,            transformAroundCenter:             {               scaleX: 1, scaleY: 1             },            onCompleteParams: [i],            onComplete: function(i:Number)             {                if (i == instanceList.length - 1)                 {                   sharpen();                }                }           })        );                animateIn.restart();      }    }        public function preTransitionState():void    {            for (var i:int = 0; i < instanceList.length; i++)      {        instanceList[i].x = instanceList[i].y = 0;        instanceList[i].scaleX = instanceList[i].scaleY = 0;      }                }        public function postTransitionState():void    {      animateIn.stop();      this.visible = true;      for (var i:int = 0; i < instanceList.length; i++)      {        var ins = instanceList[i];        TweenLite.to(ins, 0, { autoAlpha: 1, x: ins.def_x, y: ins.def_y, width: ins.def_width, height: ins.def_height, overwrite: true });      }      sharpen();    }        public function transitionOut():void { }    public function transitionInComplete():void { }    public function transitionOutComplete():void { }        public function lockCountries():void    {      for each (var topTwelve:* in topInstances)      {        topTwelve.mouseChildren = topTwelve.mouseEnabled = false;      }            for each (var orange:* in orangeInstances)      {        orange.mouseChildren = orange.mouseEnabled = false;      }            for each (var blue:* in blueInstances)      {        blue.mouseChildren = blue.mouseEnabled = false;      }    }    public function unlockCountries():void    {      trace("unloc");      for each (var topTwelve:* in topInstances)      {        topTwelve.mouseChildren = topTwelve.mouseEnabled = true;      }            for each (var orange:* in orangeInstances)      {        orange.mouseChildren = orange.mouseEnabled = true;      }            for each (var blue:* in blueInstances)      {        blue.mouseChildren = blue.mouseEnabled = true;      }    }  }}